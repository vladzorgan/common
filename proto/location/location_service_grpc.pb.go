// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/location_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	// Регион
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error)
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error)
	UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error)
	DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error)
	// Город
	GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	GetCityBySlug(ctx context.Context, in *GetCityBySlugRequest, opts ...grpc.CallOption) (*CityResponse, error)
	GetCities(ctx context.Context, in *GetCitiesRequest, opts ...grpc.CallOption) (*GetCitiesResponse, error)
	GetLargestCities(ctx context.Context, in *GetLargestCitiesRequest, opts ...grpc.CallOption) (*GetCitiesResponse, error)
	CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	// Логи поиска
	GetSearchStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchStatsResponse, error)
	GetMostSearchedQueries(ctx context.Context, in *GetMostSearchedQueriesRequest, opts ...grpc.CallOption) (*MostSearchedQueriesResponse, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/CreateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/UpdateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/DeleteRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetCityBySlug(ctx context.Context, in *GetCityBySlugRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetCityBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetCities(ctx context.Context, in *GetCitiesRequest, opts ...grpc.CallOption) (*GetCitiesResponse, error) {
	out := new(GetCitiesResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetLargestCities(ctx context.Context, in *GetLargestCitiesRequest, opts ...grpc.CallOption) (*GetCitiesResponse, error) {
	out := new(GetCitiesResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetLargestCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/CreateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/UpdateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetSearchStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchStatsResponse, error) {
	out := new(SearchStatsResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetSearchStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetMostSearchedQueries(ctx context.Context, in *GetMostSearchedQueriesRequest, opts ...grpc.CallOption) (*MostSearchedQueriesResponse, error) {
	out := new(MostSearchedQueriesResponse)
	err := c.cc.Invoke(ctx, "/location.LocationService/GetMostSearchedQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility
type LocationServiceServer interface {
	// Регион
	GetRegion(context.Context, *GetRegionRequest) (*RegionResponse, error)
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	CreateRegion(context.Context, *CreateRegionRequest) (*RegionResponse, error)
	UpdateRegion(context.Context, *UpdateRegionRequest) (*RegionResponse, error)
	DeleteRegion(context.Context, *DeleteRegionRequest) (*RegionResponse, error)
	// Город
	GetCity(context.Context, *GetCityRequest) (*CityResponse, error)
	GetCityBySlug(context.Context, *GetCityBySlugRequest) (*CityResponse, error)
	GetCities(context.Context, *GetCitiesRequest) (*GetCitiesResponse, error)
	GetLargestCities(context.Context, *GetLargestCitiesRequest) (*GetCitiesResponse, error)
	CreateCity(context.Context, *CreateCityRequest) (*CityResponse, error)
	UpdateCity(context.Context, *UpdateCityRequest) (*CityResponse, error)
	DeleteCity(context.Context, *DeleteCityRequest) (*CityResponse, error)
	// Логи поиска
	GetSearchStats(context.Context, *emptypb.Empty) (*SearchStatsResponse, error)
	GetMostSearchedQueries(context.Context, *GetMostSearchedQueriesRequest) (*MostSearchedQueriesResponse, error)
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (UnimplementedLocationServiceServer) GetRegion(context.Context, *GetRegionRequest) (*RegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedLocationServiceServer) GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedLocationServiceServer) CreateRegion(context.Context, *CreateRegionRequest) (*RegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegion not implemented")
}
func (UnimplementedLocationServiceServer) UpdateRegion(context.Context, *UpdateRegionRequest) (*RegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegion not implemented")
}
func (UnimplementedLocationServiceServer) DeleteRegion(context.Context, *DeleteRegionRequest) (*RegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegion not implemented")
}
func (UnimplementedLocationServiceServer) GetCity(context.Context, *GetCityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCity not implemented")
}
func (UnimplementedLocationServiceServer) GetCityBySlug(context.Context, *GetCityBySlugRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityBySlug not implemented")
}
func (UnimplementedLocationServiceServer) GetCities(context.Context, *GetCitiesRequest) (*GetCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCities not implemented")
}
func (UnimplementedLocationServiceServer) GetLargestCities(context.Context, *GetLargestCitiesRequest) (*GetCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLargestCities not implemented")
}
func (UnimplementedLocationServiceServer) CreateCity(context.Context, *CreateCityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedLocationServiceServer) UpdateCity(context.Context, *UpdateCityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedLocationServiceServer) DeleteCity(context.Context, *DeleteCityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedLocationServiceServer) GetSearchStats(context.Context, *emptypb.Empty) (*SearchStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchStats not implemented")
}
func (UnimplementedLocationServiceServer) GetMostSearchedQueries(context.Context, *GetMostSearchedQueriesRequest) (*MostSearchedQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostSearchedQueries not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_CreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).CreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/CreateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).CreateRegion(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_UpdateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpdateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/UpdateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpdateRegion(ctx, req.(*UpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_DeleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).DeleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/DeleteRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).DeleteRegion(ctx, req.(*DeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetCity(ctx, req.(*GetCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetCityBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetCityBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetCityBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetCityBySlug(ctx, req.(*GetCityBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetCities(ctx, req.(*GetCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetLargestCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLargestCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetLargestCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetLargestCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetLargestCities(ctx, req.(*GetLargestCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/CreateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).CreateCity(ctx, req.(*CreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/UpdateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpdateCity(ctx, req.(*UpdateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).DeleteCity(ctx, req.(*DeleteCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetSearchStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetSearchStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetSearchStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetSearchStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetMostSearchedQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMostSearchedQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetMostSearchedQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/location.LocationService/GetMostSearchedQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetMostSearchedQueries(ctx, req.(*GetMostSearchedQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegion",
			Handler:    _LocationService_GetRegion_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _LocationService_GetRegions_Handler,
		},
		{
			MethodName: "CreateRegion",
			Handler:    _LocationService_CreateRegion_Handler,
		},
		{
			MethodName: "UpdateRegion",
			Handler:    _LocationService_UpdateRegion_Handler,
		},
		{
			MethodName: "DeleteRegion",
			Handler:    _LocationService_DeleteRegion_Handler,
		},
		{
			MethodName: "GetCity",
			Handler:    _LocationService_GetCity_Handler,
		},
		{
			MethodName: "GetCityBySlug",
			Handler:    _LocationService_GetCityBySlug_Handler,
		},
		{
			MethodName: "GetCities",
			Handler:    _LocationService_GetCities_Handler,
		},
		{
			MethodName: "GetLargestCities",
			Handler:    _LocationService_GetLargestCities_Handler,
		},
		{
			MethodName: "CreateCity",
			Handler:    _LocationService_CreateCity_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _LocationService_UpdateCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _LocationService_DeleteCity_Handler,
		},
		{
			MethodName: "GetSearchStats",
			Handler:    _LocationService_GetSearchStats_Handler,
		},
		{
			MethodName: "GetMostSearchedQueries",
			Handler:    _LocationService_GetMostSearchedQueries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/location_service.proto",
}
